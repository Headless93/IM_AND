package com.qbao.newim.qbdb;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.qbao.newim.model.SessionModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SESSION_MODEL".
*/
public class SessionModelDao extends AbstractDao<SessionModel, Long> {

    public static final String TABLENAME = "SESSION_MODEL";

    /**
     * Properties of entity SessionModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Session_id = new Property(0, Long.class, "session_id", true, "_id");
        public final static Property Chat_type = new Property(1, int.class, "chat_type", false, "chat_type");
        public final static Property Is_top = new Property(2, boolean.class, "is_top", false, "is_top");
        public final static Property Msg_time = new Property(3, long.class, "msg_time", false, "msg_time");
    }


    public SessionModelDao(DaoConfig config) {
        super(config);
    }
    
    public SessionModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SESSION_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: session_id
                "\"chat_type\" INTEGER NOT NULL ," + // 1: chat_type
                "\"is_top\" INTEGER NOT NULL ," + // 2: is_top
                "\"msg_time\" INTEGER NOT NULL );"); // 3: msg_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SESSION_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SessionModel entity) {
        stmt.clearBindings();
 
        Long session_id = entity.getSession_id();
        if (session_id != null) {
            stmt.bindLong(1, session_id);
        }
        stmt.bindLong(2, entity.getChat_type());
        stmt.bindLong(3, entity.getIs_top() ? 1L: 0L);
        stmt.bindLong(4, entity.getMsg_time());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SessionModel entity) {
        stmt.clearBindings();
 
        Long session_id = entity.getSession_id();
        if (session_id != null) {
            stmt.bindLong(1, session_id);
        }
        stmt.bindLong(2, entity.getChat_type());
        stmt.bindLong(3, entity.getIs_top() ? 1L: 0L);
        stmt.bindLong(4, entity.getMsg_time());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SessionModel readEntity(Cursor cursor, int offset) {
        SessionModel entity = new SessionModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // session_id
            cursor.getInt(offset + 1), // chat_type
            cursor.getShort(offset + 2) != 0, // is_top
            cursor.getLong(offset + 3) // msg_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SessionModel entity, int offset) {
        entity.setSession_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChat_type(cursor.getInt(offset + 1));
        entity.setIs_top(cursor.getShort(offset + 2) != 0);
        entity.setMsg_time(cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SessionModel entity, long rowId) {
        entity.setSession_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SessionModel entity) {
        if(entity != null) {
            return entity.getSession_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SessionModel entity) {
        return entity.getSession_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
