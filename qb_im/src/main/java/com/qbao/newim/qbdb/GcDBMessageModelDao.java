package com.qbao.newim.qbdb;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.qbao.newim.model.message.GcDBMessageModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GC_DBMESSAGE_MODEL".
*/
public class GcDBMessageModelDao extends AbstractDao<GcDBMessageModel, String> {

    public static final String TABLENAME = "GC_DBMESSAGE_MODEL";

    /**
     * Properties of entity GcDBMessageModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Primary_key = new Property(0, String.class, "primary_key", true, "PRIMARY_KEY");
        public final static Property Message_id = new Property(1, long.class, "message_id", false, "message_id");
        public final static Property Send_user_name = new Property(2, String.class, "send_user_name", false, "send_user_name");
        public final static Property Is_self = new Property(3, boolean.class, "is_self", false, "is_self");
        public final static Property B_id = new Property(4, long.class, "b_id", false, "b_id");
        public final static Property W_id = new Property(5, long.class, "w_id", false, "w_id");
        public final static Property C_id = new Property(6, long.class, "c_id", false, "c_id");
        public final static Property App_id = new Property(7, short.class, "app_id", false, "app_id");
        public final static Property Session_id = new Property(8, int.class, "session_id", false, "session_id");
        public final static Property Chat_type = new Property(9, short.class, "chat_type", false, "chat_type");
        public final static Property M_type = new Property(10, int.class, "m_type", false, "m_type");
        public final static Property S_type = new Property(11, int.class, "s_type", false, "s_type");
        public final static Property Ext_type = new Property(12, int.class, "ext_type", false, "ext_type");
        public final static Property Msg_content = new Property(13, String.class, "msg_content", false, "msg_content");
        public final static Property Msg_time = new Property(14, long.class, "msg_time", false, "msg_time");
        public final static Property Msg_status = new Property(15, short.class, "msg_status", false, "msg_status");
        public final static Property Audio_path = new Property(16, String.class, "audio_path", false, "audio_path");
        public final static Property Pic_path = new Property(17, String.class, "pic_path", false, "pic_path");
        public final static Property Compress_path = new Property(18, String.class, "compress_path", false, "compress_path");
        public final static Property Group_id = new Property(19, long.class, "group_id", false, "group_id");
        public final static Property User_id = new Property(20, long.class, "user_id", false, "user_id");
        public final static Property Big_msg_type = new Property(21, int.class, "big_msg_type", false, "big_msg_type");
        public final static Property Message_old_id = new Property(22, long.class, "message_old_id", false, "message_old_id");
        public final static Property Operate_user_name = new Property(23, String.class, "operate_user_name", false, "operate_user_name");
        public final static Property Group_modify_content = new Property(24, String.class, "group_modify_content", false, "group_modify_content");
        public final static Property Str_user_list = new Property(25, String.class, "str_user_list", false, "str_user_list");
    }


    public GcDBMessageModelDao(DaoConfig config) {
        super(config);
    }
    
    public GcDBMessageModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GC_DBMESSAGE_MODEL\" (" + //
                "\"PRIMARY_KEY\" TEXT PRIMARY KEY NOT NULL ," + // 0: primary_key
                "\"message_id\" INTEGER NOT NULL ," + // 1: message_id
                "\"send_user_name\" TEXT," + // 2: send_user_name
                "\"is_self\" INTEGER NOT NULL ," + // 3: is_self
                "\"b_id\" INTEGER NOT NULL ," + // 4: b_id
                "\"w_id\" INTEGER NOT NULL ," + // 5: w_id
                "\"c_id\" INTEGER NOT NULL ," + // 6: c_id
                "\"app_id\" INTEGER NOT NULL ," + // 7: app_id
                "\"session_id\" INTEGER NOT NULL ," + // 8: session_id
                "\"chat_type\" INTEGER NOT NULL ," + // 9: chat_type
                "\"m_type\" INTEGER NOT NULL ," + // 10: m_type
                "\"s_type\" INTEGER NOT NULL ," + // 11: s_type
                "\"ext_type\" INTEGER NOT NULL ," + // 12: ext_type
                "\"msg_content\" TEXT," + // 13: msg_content
                "\"msg_time\" INTEGER NOT NULL ," + // 14: msg_time
                "\"msg_status\" INTEGER NOT NULL ," + // 15: msg_status
                "\"audio_path\" TEXT," + // 16: audio_path
                "\"pic_path\" TEXT," + // 17: pic_path
                "\"compress_path\" TEXT," + // 18: compress_path
                "\"group_id\" INTEGER NOT NULL ," + // 19: group_id
                "\"user_id\" INTEGER NOT NULL ," + // 20: user_id
                "\"big_msg_type\" INTEGER NOT NULL ," + // 21: big_msg_type
                "\"message_old_id\" INTEGER NOT NULL ," + // 22: message_old_id
                "\"operate_user_name\" TEXT," + // 23: operate_user_name
                "\"group_modify_content\" TEXT," + // 24: group_modify_content
                "\"str_user_list\" TEXT);"); // 25: str_user_list
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GC_DBMESSAGE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GcDBMessageModel entity) {
        stmt.clearBindings();
 
        String primary_key = entity.getPrimary_key();
        if (primary_key != null) {
            stmt.bindString(1, primary_key);
        }
        stmt.bindLong(2, entity.getMessage_id());
 
        String send_user_name = entity.getSend_user_name();
        if (send_user_name != null) {
            stmt.bindString(3, send_user_name);
        }
        stmt.bindLong(4, entity.getIs_self() ? 1L: 0L);
        stmt.bindLong(5, entity.getB_id());
        stmt.bindLong(6, entity.getW_id());
        stmt.bindLong(7, entity.getC_id());
        stmt.bindLong(8, entity.getApp_id());
        stmt.bindLong(9, entity.getSession_id());
        stmt.bindLong(10, entity.getChat_type());
        stmt.bindLong(11, entity.getM_type());
        stmt.bindLong(12, entity.getS_type());
        stmt.bindLong(13, entity.getExt_type());
 
        String msg_content = entity.getMsg_content();
        if (msg_content != null) {
            stmt.bindString(14, msg_content);
        }
        stmt.bindLong(15, entity.getMsg_time());
        stmt.bindLong(16, entity.getMsg_status());
 
        String audio_path = entity.getAudio_path();
        if (audio_path != null) {
            stmt.bindString(17, audio_path);
        }
 
        String pic_path = entity.getPic_path();
        if (pic_path != null) {
            stmt.bindString(18, pic_path);
        }
 
        String compress_path = entity.getCompress_path();
        if (compress_path != null) {
            stmt.bindString(19, compress_path);
        }
        stmt.bindLong(20, entity.getGroup_id());
        stmt.bindLong(21, entity.getUser_id());
        stmt.bindLong(22, entity.getBig_msg_type());
        stmt.bindLong(23, entity.getMessage_old_id());
 
        String operate_user_name = entity.getOperate_user_name();
        if (operate_user_name != null) {
            stmt.bindString(24, operate_user_name);
        }
 
        String group_modify_content = entity.getGroup_modify_content();
        if (group_modify_content != null) {
            stmt.bindString(25, group_modify_content);
        }
 
        String str_user_list = entity.getStr_user_list();
        if (str_user_list != null) {
            stmt.bindString(26, str_user_list);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GcDBMessageModel entity) {
        stmt.clearBindings();
 
        String primary_key = entity.getPrimary_key();
        if (primary_key != null) {
            stmt.bindString(1, primary_key);
        }
        stmt.bindLong(2, entity.getMessage_id());
 
        String send_user_name = entity.getSend_user_name();
        if (send_user_name != null) {
            stmt.bindString(3, send_user_name);
        }
        stmt.bindLong(4, entity.getIs_self() ? 1L: 0L);
        stmt.bindLong(5, entity.getB_id());
        stmt.bindLong(6, entity.getW_id());
        stmt.bindLong(7, entity.getC_id());
        stmt.bindLong(8, entity.getApp_id());
        stmt.bindLong(9, entity.getSession_id());
        stmt.bindLong(10, entity.getChat_type());
        stmt.bindLong(11, entity.getM_type());
        stmt.bindLong(12, entity.getS_type());
        stmt.bindLong(13, entity.getExt_type());
 
        String msg_content = entity.getMsg_content();
        if (msg_content != null) {
            stmt.bindString(14, msg_content);
        }
        stmt.bindLong(15, entity.getMsg_time());
        stmt.bindLong(16, entity.getMsg_status());
 
        String audio_path = entity.getAudio_path();
        if (audio_path != null) {
            stmt.bindString(17, audio_path);
        }
 
        String pic_path = entity.getPic_path();
        if (pic_path != null) {
            stmt.bindString(18, pic_path);
        }
 
        String compress_path = entity.getCompress_path();
        if (compress_path != null) {
            stmt.bindString(19, compress_path);
        }
        stmt.bindLong(20, entity.getGroup_id());
        stmt.bindLong(21, entity.getUser_id());
        stmt.bindLong(22, entity.getBig_msg_type());
        stmt.bindLong(23, entity.getMessage_old_id());
 
        String operate_user_name = entity.getOperate_user_name();
        if (operate_user_name != null) {
            stmt.bindString(24, operate_user_name);
        }
 
        String group_modify_content = entity.getGroup_modify_content();
        if (group_modify_content != null) {
            stmt.bindString(25, group_modify_content);
        }
 
        String str_user_list = entity.getStr_user_list();
        if (str_user_list != null) {
            stmt.bindString(26, str_user_list);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public GcDBMessageModel readEntity(Cursor cursor, int offset) {
        GcDBMessageModel entity = new GcDBMessageModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // primary_key
            cursor.getLong(offset + 1), // message_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // send_user_name
            cursor.getShort(offset + 3) != 0, // is_self
            cursor.getLong(offset + 4), // b_id
            cursor.getLong(offset + 5), // w_id
            cursor.getLong(offset + 6), // c_id
            cursor.getShort(offset + 7), // app_id
            cursor.getInt(offset + 8), // session_id
            cursor.getShort(offset + 9), // chat_type
            cursor.getInt(offset + 10), // m_type
            cursor.getInt(offset + 11), // s_type
            cursor.getInt(offset + 12), // ext_type
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // msg_content
            cursor.getLong(offset + 14), // msg_time
            cursor.getShort(offset + 15), // msg_status
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // audio_path
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // pic_path
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // compress_path
            cursor.getLong(offset + 19), // group_id
            cursor.getLong(offset + 20), // user_id
            cursor.getInt(offset + 21), // big_msg_type
            cursor.getLong(offset + 22), // message_old_id
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // operate_user_name
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // group_modify_content
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25) // str_user_list
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GcDBMessageModel entity, int offset) {
        entity.setPrimary_key(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMessage_id(cursor.getLong(offset + 1));
        entity.setSend_user_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIs_self(cursor.getShort(offset + 3) != 0);
        entity.setB_id(cursor.getLong(offset + 4));
        entity.setW_id(cursor.getLong(offset + 5));
        entity.setC_id(cursor.getLong(offset + 6));
        entity.setApp_id(cursor.getShort(offset + 7));
        entity.setSession_id(cursor.getInt(offset + 8));
        entity.setChat_type(cursor.getShort(offset + 9));
        entity.setM_type(cursor.getInt(offset + 10));
        entity.setS_type(cursor.getInt(offset + 11));
        entity.setExt_type(cursor.getInt(offset + 12));
        entity.setMsg_content(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMsg_time(cursor.getLong(offset + 14));
        entity.setMsg_status(cursor.getShort(offset + 15));
        entity.setAudio_path(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPic_path(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCompress_path(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setGroup_id(cursor.getLong(offset + 19));
        entity.setUser_id(cursor.getLong(offset + 20));
        entity.setBig_msg_type(cursor.getInt(offset + 21));
        entity.setMessage_old_id(cursor.getLong(offset + 22));
        entity.setOperate_user_name(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setGroup_modify_content(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setStr_user_list(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
     }
    
    @Override
    protected final String updateKeyAfterInsert(GcDBMessageModel entity, long rowId) {
        return entity.getPrimary_key();
    }
    
    @Override
    public String getKey(GcDBMessageModel entity) {
        if(entity != null) {
            return entity.getPrimary_key();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GcDBMessageModel entity) {
        return entity.getPrimary_key() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
