package com.qbao.newim.qbdb;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.qbao.newim.model.IMGroupInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMGROUP_INFO".
*/
public class IMGroupInfoDao extends AbstractDao<IMGroupInfo, Long> {

    public static final String TABLENAME = "IMGROUP_INFO";

    /**
     * Properties of entity IMGroupInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IsMember = new Property(0, int.class, "isMember", false, "isMember");
        public final static Property Group_id = new Property(1, long.class, "group_id", true, "_id");
        public final static Property Group_name = new Property(2, String.class, "group_name", false, "group_name");
        public final static Property Group_img_url = new Property(3, String.class, "group_img_url", false, "group_img_url");
        public final static Property Group_count = new Property(4, int.class, "group_count", false, "group_count");
        public final static Property Group_manager_user_id = new Property(5, long.class, "group_manager_user_id", false, "group_manager_user_id");
        public final static Property Group_add_is_agree = new Property(6, int.class, "group_add_is_agree", false, "group_add_is_agree");
        public final static Property Group_ct = new Property(7, long.class, "group_ct", false, "group_ct");
        public final static Property Group_remark = new Property(8, String.class, "group_remark", false, "group_remark");
        public final static Property Group_max_count = new Property(9, int.class, "group_max_count", false, "group_max_count");
        public final static Property Is_save_contact = new Property(10, boolean.class, "is_save_contact", false, "is_save_contact");
        public final static Property Notify_type = new Property(11, byte.class, "notify_type", false, "notify_type");
        public final static Property Group_add_max_count = new Property(12, int.class, "group_add_max_count", false, "group_add_max_count");
        public final static Property Last_message_id = new Property(13, long.class, "last_message_id", false, "last_message_id");
        public final static Property Is_show_nick = new Property(14, boolean.class, "is_show_nick", false, "is_show_nick");
    }


    public IMGroupInfoDao(DaoConfig config) {
        super(config);
    }
    
    public IMGroupInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMGROUP_INFO\" (" + //
                "\"isMember\" INTEGER NOT NULL ," + // 0: isMember
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 1: group_id
                "\"group_name\" TEXT," + // 2: group_name
                "\"group_img_url\" TEXT," + // 3: group_img_url
                "\"group_count\" INTEGER NOT NULL ," + // 4: group_count
                "\"group_manager_user_id\" INTEGER NOT NULL ," + // 5: group_manager_user_id
                "\"group_add_is_agree\" INTEGER NOT NULL ," + // 6: group_add_is_agree
                "\"group_ct\" INTEGER NOT NULL ," + // 7: group_ct
                "\"group_remark\" TEXT," + // 8: group_remark
                "\"group_max_count\" INTEGER NOT NULL ," + // 9: group_max_count
                "\"is_save_contact\" INTEGER NOT NULL ," + // 10: is_save_contact
                "\"notify_type\" INTEGER NOT NULL ," + // 11: notify_type
                "\"group_add_max_count\" INTEGER NOT NULL ," + // 12: group_add_max_count
                "\"last_message_id\" INTEGER NOT NULL ," + // 13: last_message_id
                "\"is_show_nick\" INTEGER NOT NULL );"); // 14: is_show_nick
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMGROUP_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IMGroupInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getIsMember());
        stmt.bindLong(2, entity.getGroup_id());
 
        String group_name = entity.getGroup_name();
        if (group_name != null) {
            stmt.bindString(3, group_name);
        }
 
        String group_img_url = entity.getGroup_img_url();
        if (group_img_url != null) {
            stmt.bindString(4, group_img_url);
        }
        stmt.bindLong(5, entity.getGroup_count());
        stmt.bindLong(6, entity.getGroup_manager_user_id());
        stmt.bindLong(7, entity.getGroup_add_is_agree());
        stmt.bindLong(8, entity.getGroup_ct());
 
        String group_remark = entity.getGroup_remark();
        if (group_remark != null) {
            stmt.bindString(9, group_remark);
        }
        stmt.bindLong(10, entity.getGroup_max_count());
        stmt.bindLong(11, entity.getIs_save_contact() ? 1L: 0L);
        stmt.bindLong(12, entity.getNotify_type());
        stmt.bindLong(13, entity.getGroup_add_max_count());
        stmt.bindLong(14, entity.getLast_message_id());
        stmt.bindLong(15, entity.getIs_show_nick() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IMGroupInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getIsMember());
        stmt.bindLong(2, entity.getGroup_id());
 
        String group_name = entity.getGroup_name();
        if (group_name != null) {
            stmt.bindString(3, group_name);
        }
 
        String group_img_url = entity.getGroup_img_url();
        if (group_img_url != null) {
            stmt.bindString(4, group_img_url);
        }
        stmt.bindLong(5, entity.getGroup_count());
        stmt.bindLong(6, entity.getGroup_manager_user_id());
        stmt.bindLong(7, entity.getGroup_add_is_agree());
        stmt.bindLong(8, entity.getGroup_ct());
 
        String group_remark = entity.getGroup_remark();
        if (group_remark != null) {
            stmt.bindString(9, group_remark);
        }
        stmt.bindLong(10, entity.getGroup_max_count());
        stmt.bindLong(11, entity.getIs_save_contact() ? 1L: 0L);
        stmt.bindLong(12, entity.getNotify_type());
        stmt.bindLong(13, entity.getGroup_add_max_count());
        stmt.bindLong(14, entity.getLast_message_id());
        stmt.bindLong(15, entity.getIs_show_nick() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 1);
    }    

    @Override
    public IMGroupInfo readEntity(Cursor cursor, int offset) {
        IMGroupInfo entity = new IMGroupInfo( //
            cursor.getInt(offset + 0), // isMember
            cursor.getLong(offset + 1), // group_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // group_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // group_img_url
            cursor.getInt(offset + 4), // group_count
            cursor.getLong(offset + 5), // group_manager_user_id
            cursor.getInt(offset + 6), // group_add_is_agree
            cursor.getLong(offset + 7), // group_ct
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // group_remark
            cursor.getInt(offset + 9), // group_max_count
            cursor.getShort(offset + 10) != 0, // is_save_contact
            (byte) cursor.getShort(offset + 11), // notify_type
            cursor.getInt(offset + 12), // group_add_max_count
            cursor.getLong(offset + 13), // last_message_id
            cursor.getShort(offset + 14) != 0 // is_show_nick
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IMGroupInfo entity, int offset) {
        entity.setIsMember(cursor.getInt(offset + 0));
        entity.setGroup_id(cursor.getLong(offset + 1));
        entity.setGroup_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGroup_img_url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGroup_count(cursor.getInt(offset + 4));
        entity.setGroup_manager_user_id(cursor.getLong(offset + 5));
        entity.setGroup_add_is_agree(cursor.getInt(offset + 6));
        entity.setGroup_ct(cursor.getLong(offset + 7));
        entity.setGroup_remark(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGroup_max_count(cursor.getInt(offset + 9));
        entity.setIs_save_contact(cursor.getShort(offset + 10) != 0);
        entity.setNotify_type((byte) cursor.getShort(offset + 11));
        entity.setGroup_add_max_count(cursor.getInt(offset + 12));
        entity.setLast_message_id(cursor.getLong(offset + 13));
        entity.setIs_show_nick(cursor.getShort(offset + 14) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IMGroupInfo entity, long rowId) {
        entity.setGroup_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IMGroupInfo entity) {
        if(entity != null) {
            return entity.getGroup_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IMGroupInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
