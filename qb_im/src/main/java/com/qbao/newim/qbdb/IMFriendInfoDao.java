package com.qbao.newim.qbdb;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.qbao.newim.model.IMFriendInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMFRIEND_INFO".
*/
public class IMFriendInfoDao extends AbstractDao<IMFriendInfo, Long> {

    public static final String TABLENAME = "IMFRIEND_INFO";

    /**
     * Properties of entity IMFriendInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, long.class, "userId", true, "_id");
        public final static Property User_name = new Property(1, String.class, "user_name", false, "user_name");
        public final static Property Mobile = new Property(2, long.class, "mobile", false, "mobile");
        public final static Property Birthday = new Property(3, long.class, "birthday", false, "birthday");
        public final static Property LocationCity = new Property(4, String.class, "locationCity", false, "locationCity");
        public final static Property NickName = new Property(5, String.class, "nickName", false, "nickName");
        public final static Property LocationPro = new Property(6, String.class, "locationPro", false, "locationPro");
        public final static Property Sex = new Property(7, int.class, "sex", false, "sex");
        public final static Property Mail = new Property(8, String.class, "mail", false, "mail");
        public final static Property Head_url = new Property(9, String.class, "head_url", false, "head_url");
        public final static Property Signature = new Property(10, String.class, "signature", false, "signature");
        public final static Property Pinyin = new Property(11, String.class, "pinyin", false, "pinyin");
        public final static Property Remark_name = new Property(12, String.class, "remark_name", false, "remark_name");
        public final static Property Black_type = new Property(13, int.class, "black_type", false, "black_type");
        public final static Property Delete_type = new Property(14, int.class, "delete_type", false, "delete_type");
        public final static Property Status = new Property(15, int.class, "status", false, "status");
        public final static Property Source_type = new Property(16, byte.class, "source_type", false, "source_type");
        public final static Property Friend_token = new Property(17, long.class, "friend_token", false, "friend_token");
        public final static Property Opt_msg = new Property(18, String.class, "opt_msg", false, "opt_msg");
        public final static Property Notify = new Property(19, boolean.class, "notify", false, "notify");
        public final static Property Is_business = new Property(20, boolean.class, "is_business", false, "is_business");
    }


    public IMFriendInfoDao(DaoConfig config) {
        super(config);
    }
    
    public IMFriendInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMFRIEND_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: userId
                "\"user_name\" TEXT," + // 1: user_name
                "\"mobile\" INTEGER NOT NULL ," + // 2: mobile
                "\"birthday\" INTEGER NOT NULL ," + // 3: birthday
                "\"locationCity\" TEXT," + // 4: locationCity
                "\"nickName\" TEXT," + // 5: nickName
                "\"locationPro\" TEXT," + // 6: locationPro
                "\"sex\" INTEGER NOT NULL ," + // 7: sex
                "\"mail\" TEXT," + // 8: mail
                "\"head_url\" TEXT," + // 9: head_url
                "\"signature\" TEXT," + // 10: signature
                "\"pinyin\" TEXT," + // 11: pinyin
                "\"remark_name\" TEXT," + // 12: remark_name
                "\"black_type\" INTEGER NOT NULL ," + // 13: black_type
                "\"delete_type\" INTEGER NOT NULL ," + // 14: delete_type
                "\"status\" INTEGER NOT NULL ," + // 15: status
                "\"source_type\" INTEGER NOT NULL ," + // 16: source_type
                "\"friend_token\" INTEGER NOT NULL ," + // 17: friend_token
                "\"opt_msg\" TEXT," + // 18: opt_msg
                "\"notify\" INTEGER NOT NULL ," + // 19: notify
                "\"is_business\" INTEGER NOT NULL );"); // 20: is_business
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMFRIEND_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IMFriendInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserId());
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(2, user_name);
        }
        stmt.bindLong(3, entity.getMobile());
        stmt.bindLong(4, entity.getBirthday());
 
        String locationCity = entity.getLocationCity();
        if (locationCity != null) {
            stmt.bindString(5, locationCity);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(6, nickName);
        }
 
        String locationPro = entity.getLocationPro();
        if (locationPro != null) {
            stmt.bindString(7, locationPro);
        }
        stmt.bindLong(8, entity.getSex());
 
        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(9, mail);
        }
 
        String head_url = entity.getHead_url();
        if (head_url != null) {
            stmt.bindString(10, head_url);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(11, signature);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(12, pinyin);
        }
 
        String remark_name = entity.getRemark_name();
        if (remark_name != null) {
            stmt.bindString(13, remark_name);
        }
        stmt.bindLong(14, entity.getBlack_type());
        stmt.bindLong(15, entity.getDelete_type());
        stmt.bindLong(16, entity.getStatus());
        stmt.bindLong(17, entity.getSource_type());
        stmt.bindLong(18, entity.getFriend_token());
 
        String opt_msg = entity.getOpt_msg();
        if (opt_msg != null) {
            stmt.bindString(19, opt_msg);
        }
        stmt.bindLong(20, entity.getNotify() ? 1L: 0L);
        stmt.bindLong(21, entity.getIs_business() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IMFriendInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserId());
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(2, user_name);
        }
        stmt.bindLong(3, entity.getMobile());
        stmt.bindLong(4, entity.getBirthday());
 
        String locationCity = entity.getLocationCity();
        if (locationCity != null) {
            stmt.bindString(5, locationCity);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(6, nickName);
        }
 
        String locationPro = entity.getLocationPro();
        if (locationPro != null) {
            stmt.bindString(7, locationPro);
        }
        stmt.bindLong(8, entity.getSex());
 
        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(9, mail);
        }
 
        String head_url = entity.getHead_url();
        if (head_url != null) {
            stmt.bindString(10, head_url);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(11, signature);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(12, pinyin);
        }
 
        String remark_name = entity.getRemark_name();
        if (remark_name != null) {
            stmt.bindString(13, remark_name);
        }
        stmt.bindLong(14, entity.getBlack_type());
        stmt.bindLong(15, entity.getDelete_type());
        stmt.bindLong(16, entity.getStatus());
        stmt.bindLong(17, entity.getSource_type());
        stmt.bindLong(18, entity.getFriend_token());
 
        String opt_msg = entity.getOpt_msg();
        if (opt_msg != null) {
            stmt.bindString(19, opt_msg);
        }
        stmt.bindLong(20, entity.getNotify() ? 1L: 0L);
        stmt.bindLong(21, entity.getIs_business() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public IMFriendInfo readEntity(Cursor cursor, int offset) {
        IMFriendInfo entity = new IMFriendInfo( //
            cursor.getLong(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_name
            cursor.getLong(offset + 2), // mobile
            cursor.getLong(offset + 3), // birthday
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // locationCity
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nickName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // locationPro
            cursor.getInt(offset + 7), // sex
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // mail
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // head_url
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // signature
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // pinyin
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // remark_name
            cursor.getInt(offset + 13), // black_type
            cursor.getInt(offset + 14), // delete_type
            cursor.getInt(offset + 15), // status
            (byte) cursor.getShort(offset + 16), // source_type
            cursor.getLong(offset + 17), // friend_token
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // opt_msg
            cursor.getShort(offset + 19) != 0, // notify
            cursor.getShort(offset + 20) != 0 // is_business
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IMFriendInfo entity, int offset) {
        entity.setUserId(cursor.getLong(offset + 0));
        entity.setUser_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMobile(cursor.getLong(offset + 2));
        entity.setBirthday(cursor.getLong(offset + 3));
        entity.setLocationCity(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNickName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLocationPro(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSex(cursor.getInt(offset + 7));
        entity.setMail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHead_url(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSignature(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPinyin(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRemark_name(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setBlack_type(cursor.getInt(offset + 13));
        entity.setDelete_type(cursor.getInt(offset + 14));
        entity.setStatus(cursor.getInt(offset + 15));
        entity.setSource_type((byte) cursor.getShort(offset + 16));
        entity.setFriend_token(cursor.getLong(offset + 17));
        entity.setOpt_msg(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setNotify(cursor.getShort(offset + 19) != 0);
        entity.setIs_business(cursor.getShort(offset + 20) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IMFriendInfo entity, long rowId) {
        entity.setUserId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IMFriendInfo entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IMFriendInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
