package com.qbao.newim.qbdb;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.qbao.newim.model.MsgCountModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MSG_COUNT_MODEL".
*/
public class MsgCountModelDao extends AbstractDao<MsgCountModel, String> {

    public static final String TABLENAME = "MSG_COUNT_MODEL";

    /**
     * Properties of entity MsgCountModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Primary_key = new Property(0, String.class, "primary_key", true, "PRIMARY_KEY");
        public final static Property Session_id = new Property(1, long.class, "session_id", false, "session_id");
        public final static Property Chat_type = new Property(2, int.class, "chat_type", false, "chat_type");
        public final static Property Unread_count = new Property(3, int.class, "unread_count", false, "unread_count");
    }


    public MsgCountModelDao(DaoConfig config) {
        super(config);
    }
    
    public MsgCountModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MSG_COUNT_MODEL\" (" + //
                "\"PRIMARY_KEY\" TEXT PRIMARY KEY NOT NULL ," + // 0: primary_key
                "\"session_id\" INTEGER NOT NULL ," + // 1: session_id
                "\"chat_type\" INTEGER NOT NULL ," + // 2: chat_type
                "\"unread_count\" INTEGER NOT NULL );"); // 3: unread_count
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MSG_COUNT_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MsgCountModel entity) {
        stmt.clearBindings();
 
        String primary_key = entity.getPrimary_key();
        if (primary_key != null) {
            stmt.bindString(1, primary_key);
        }
        stmt.bindLong(2, entity.getSession_id());
        stmt.bindLong(3, entity.getChat_type());
        stmt.bindLong(4, entity.getUnread_count());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MsgCountModel entity) {
        stmt.clearBindings();
 
        String primary_key = entity.getPrimary_key();
        if (primary_key != null) {
            stmt.bindString(1, primary_key);
        }
        stmt.bindLong(2, entity.getSession_id());
        stmt.bindLong(3, entity.getChat_type());
        stmt.bindLong(4, entity.getUnread_count());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public MsgCountModel readEntity(Cursor cursor, int offset) {
        MsgCountModel entity = new MsgCountModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // primary_key
            cursor.getLong(offset + 1), // session_id
            cursor.getInt(offset + 2), // chat_type
            cursor.getInt(offset + 3) // unread_count
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MsgCountModel entity, int offset) {
        entity.setPrimary_key(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSession_id(cursor.getLong(offset + 1));
        entity.setChat_type(cursor.getInt(offset + 2));
        entity.setUnread_count(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(MsgCountModel entity, long rowId) {
        return entity.getPrimary_key();
    }
    
    @Override
    public String getKey(MsgCountModel entity) {
        if(entity != null) {
            return entity.getPrimary_key();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MsgCountModel entity) {
        return entity.getPrimary_key() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
