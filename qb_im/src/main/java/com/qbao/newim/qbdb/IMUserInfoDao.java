package com.qbao.newim.qbdb;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.qbao.newim.model.IMUserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMUSER_INFO".
*/
public class IMUserInfoDao extends AbstractDao<IMUserInfo, Long> {

    public static final String TABLENAME = "IMUSER_INFO";

    /**
     * Properties of entity IMUserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, long.class, "userId", true, "_id");
        public final static Property User_name = new Property(1, String.class, "user_name", false, "user_name");
        public final static Property Mobile = new Property(2, long.class, "mobile", false, "mobile");
        public final static Property Birthday = new Property(3, long.class, "birthday", false, "birthday");
        public final static Property LocationCity = new Property(4, String.class, "locationCity", false, "locationCity");
        public final static Property NickName = new Property(5, String.class, "nickName", false, "nickName");
        public final static Property LocationPro = new Property(6, String.class, "locationPro", false, "locationPro");
        public final static Property Sex = new Property(7, int.class, "sex", false, "sex");
        public final static Property Mail = new Property(8, String.class, "mail", false, "mail");
        public final static Property Head_url = new Property(9, String.class, "head_url", false, "head_url");
        public final static Property Token = new Property(10, String.class, "token", false, "token");
        public final static Property Signature = new Property(11, String.class, "signature", false, "signature");
        public final static Property Verification = new Property(12, String.class, "verification", false, "verification");
    }


    public IMUserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public IMUserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMUSER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: userId
                "\"user_name\" TEXT," + // 1: user_name
                "\"mobile\" INTEGER NOT NULL ," + // 2: mobile
                "\"birthday\" INTEGER NOT NULL ," + // 3: birthday
                "\"locationCity\" TEXT," + // 4: locationCity
                "\"nickName\" TEXT," + // 5: nickName
                "\"locationPro\" TEXT," + // 6: locationPro
                "\"sex\" INTEGER NOT NULL ," + // 7: sex
                "\"mail\" TEXT," + // 8: mail
                "\"head_url\" TEXT," + // 9: head_url
                "\"token\" TEXT," + // 10: token
                "\"signature\" TEXT," + // 11: signature
                "\"verification\" TEXT);"); // 12: verification
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMUSER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IMUserInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserId());
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(2, user_name);
        }
        stmt.bindLong(3, entity.getMobile());
        stmt.bindLong(4, entity.getBirthday());
 
        String locationCity = entity.getLocationCity();
        if (locationCity != null) {
            stmt.bindString(5, locationCity);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(6, nickName);
        }
 
        String locationPro = entity.getLocationPro();
        if (locationPro != null) {
            stmt.bindString(7, locationPro);
        }
        stmt.bindLong(8, entity.getSex());
 
        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(9, mail);
        }
 
        String head_url = entity.getHead_url();
        if (head_url != null) {
            stmt.bindString(10, head_url);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(11, token);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(12, signature);
        }
 
        String verification = entity.getVerification();
        if (verification != null) {
            stmt.bindString(13, verification);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IMUserInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserId());
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(2, user_name);
        }
        stmt.bindLong(3, entity.getMobile());
        stmt.bindLong(4, entity.getBirthday());
 
        String locationCity = entity.getLocationCity();
        if (locationCity != null) {
            stmt.bindString(5, locationCity);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(6, nickName);
        }
 
        String locationPro = entity.getLocationPro();
        if (locationPro != null) {
            stmt.bindString(7, locationPro);
        }
        stmt.bindLong(8, entity.getSex());
 
        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(9, mail);
        }
 
        String head_url = entity.getHead_url();
        if (head_url != null) {
            stmt.bindString(10, head_url);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(11, token);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(12, signature);
        }
 
        String verification = entity.getVerification();
        if (verification != null) {
            stmt.bindString(13, verification);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public IMUserInfo readEntity(Cursor cursor, int offset) {
        IMUserInfo entity = new IMUserInfo( //
            cursor.getLong(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_name
            cursor.getLong(offset + 2), // mobile
            cursor.getLong(offset + 3), // birthday
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // locationCity
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nickName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // locationPro
            cursor.getInt(offset + 7), // sex
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // mail
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // head_url
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // token
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // signature
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // verification
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IMUserInfo entity, int offset) {
        entity.setUserId(cursor.getLong(offset + 0));
        entity.setUser_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMobile(cursor.getLong(offset + 2));
        entity.setBirthday(cursor.getLong(offset + 3));
        entity.setLocationCity(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNickName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLocationPro(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSex(cursor.getInt(offset + 7));
        entity.setMail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHead_url(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setToken(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSignature(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setVerification(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IMUserInfo entity, long rowId) {
        entity.setUserId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IMUserInfo entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IMUserInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
